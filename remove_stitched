#!/bin/env python


import argparse
import sqlalchemy


def parse_workflow_ids(workflow_ids):
    """add zero padding and convert to string for database query"""
    if isinstance(workflow_ids, int):
        return f"{workflow_ids:06}"
    elif isinstance(workflow_ids, list):
        return [f"{i:06}" for i in workflow_ids]
    else:
        raise TypeError


def create_connection():
    con = sqlalchemy.create_engine(
        "sqlite:///processed_experiments.sqlite"
    )
    return con


def remove_stitched(workflow_id):
    """
    Given a single workflow_id as a string e.g "000001", this will
    remove all entries from the `stitched` table where `plate_name`
    endswith `workflow_id`.
    """
    assert isinstance(workflow_id, str)
    con = create_connection()
    workflow_endswith = f"%{workflow_id}"
    con.execute(
        "DELETE FROM stitched WHERE plate_name LIKE ?",
        (workflow_endswith, )
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Remove stitched entries from sqlite database"
    )
    parser.add_argument(
        "workflow_ids",
        metavar="N",
        type=int,
        nargs="+",
        help="workflow IDs to remove"
    )
    args = parser.parse_args()

    workflow_ids = parse_workflow_ids(args.workflow_ids)
    print(f"--- Removing: {workflow_ids} from: stitched ---")
    for workflow_id in workflow_ids:
        remove_stitched(workflow_id)
